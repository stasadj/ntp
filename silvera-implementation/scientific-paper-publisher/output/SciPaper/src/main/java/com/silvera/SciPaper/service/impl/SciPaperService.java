/**
    Use this file to implement business logic. This file will be preserved
    during next compilations.

    Generated by: silvera
    Date: 2022-05-18 18:25:11
*/

package com.silvera.SciPaper.service.impl;

import java.util.Optional;
import org.springframework.stereotype.Service;
import com.silvera.SciPaper.domain.model.*;
import com.silvera.SciPaper.service.base.*;
import com.silvera.SciPaper.repository.*;
import com.silvera.SciPaper.messages.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;

import com.silvera.SciPaper.service.dependencies.*;


@Service
public class SciPaperService implements ISciPaperService {

    
    
    @Autowired
    SciPaperRepository scipaperRepository;
    

    
    @Autowired
    UserClient userClient;
    

    @Autowired
    KafkaTemplate<String, com.silvera.SciPaper.messages.publicationmsggroup.PaperPublished> publicationmsggroupPaperPublishedKafkaTemplate;
    

    // Auto-generated CRUD methods
    
    @Override
    public SciPaper createSciPaper(SciPaper scipaper){
        if (userClient.isLoggedIn(scipaper.getAuthor())) {
            scipaperRepository.save(scipaper);
        } else {
            return null;
        }

        

        Optional<SciPaper> opt = scipaperRepository.findById(scipaper.getId());
        return opt.orElse(null);
    }
    
    
    @Override
    public SciPaper updateSciPaper(java.lang.String id, SciPaper scipaperUpdate){
        Optional<SciPaper> opt = scipaperRepository.findById(id);
        SciPaper entity = opt.orElseThrow(IllegalArgumentException::new);
        scipaperRepository.save(scipaperUpdate);

        

        return scipaperUpdate;
    }
    
    
    @Override
    public SciPaper readSciPaper(java.lang.String id){
        Optional<SciPaper> opt = scipaperRepository.findById(id);
        return opt.orElse(null);
    }
    
    
    @Override
    public void deleteSciPaper(java.lang.String id){
        Optional<SciPaper> opt = scipaperRepository.findById(id);
        SciPaper entity = opt.orElseThrow(IllegalArgumentException::new);
        scipaperRepository.delete(entity);

        
    }
    
    


    
    @Override
    public java.util.List<SciPaper> listSciPapers(java.lang.String author){
        if (userClient.isLoggedIn(author)) {
            return scipaperRepository.findAllByAuthor(author);
        } else {
            return null;
        }
    }
    
    @Override
    public SciPaper publish(java.lang.String sciPaperId){
        // Uncomment to publish the message
        com.silvera.SciPaper.messages.publicationmsggroup.PaperPublished msg = new com.silvera.SciPaper.messages.publicationmsggroup.PaperPublished();
        // Here set values to the message attributes:
        // ------------------------------------------
        SciPaper paper = this.readSciPaper(sciPaperId);
        msg.setSciPaperId(sciPaperId);
        msg.setTitle(paper.getTitle());
        msg.setAuthor(userClient.getName(paper.getAuthor()));
        // ------------------------------------------
        if (userClient.isLoggedIn(paper.getAuthor())) {
            paper.setPublished(true);
            scipaperRepository.save(paper);
            publicationmsggroupPaperPublishedKafkaTemplate.send("PUBLISH_PAPER", msg);
            return paper;
        } 
        return null;
    }
    

    

}